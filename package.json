{
  "name": "csscat",
  "version": "0.2.0-alpha",
  "description": "A CSS Dependency Manager.",
  "author": {
    "name": "Ryan Fitzer",
    "email": "ryan@ryanfitzer.com",
    "url": "http://ryanfitzer.org"
  },
  "repository": {
      "type": "git",
      "url": "https://github.com/ryanfitzer/csscat.git"
  },
  "main": "main.js",
  "engines": {
      "node": ">=0.8.0"
  },
  "dependencies": {
    "glob": "~3.1.21",
    "ycssmin": "~1.0.1"
  },
  "readme": "# CSSCat #\n\nCSSCat is a [Node.js][nodejs] tool for managing CSS dependencies. Its goal is to facilitate CSS modularity through the liberal use of `@import` statements ([including ones with media conditions][mqs]) during development that can then be built into single files for production.\n\n\"**Why not just use one of the various CSS preprocessors available these days**\", you ask? Good question. I wrote CSSCat for those who don't use a preprocessor and/or for when a project's limitations exclude a preprocessor as an option.\n\n**CSSCat IS IN THE ALPHA STAGES**. So please use with caution. Due to its file transformation functionality, it should only be used in a manner that does not jeopardize your valuable work. More testing and real-world use is needed to ensure a solid tool that functions as advertised.\n\nWith that said, testers are needed (and much appreciated)! Please log any issues or features and I'll follow up as soon as possible.\n\n\n## Features ##\n\n- Concatenates file dependencies by parsing their `@import` statements ([including ones with media conditions][mqs]). CSSCat correctly wraps the imported CSS in its equivalent `@media` block (also preserves its position in the cascade). For example:\n\n    **Before**:\n        \n        @import url( 'a.css' ) screen and ( min-width: 100px );\n\n        \n    **After**:\n\n        @media screen and ( min-width: 100px ) {\n        #some-id {\n            display:awesome;\n        }       \n        }\n- Optimizes each file via [CSSMin][CSSMin].\n\n\n## Installation ##\n\n    $ npm install csscat\n\n\n## Usage ##\n\n    var csscat = require( 'csscat' );\n    \n    csscat.init({\n        dir: 'path/to/css'\n    });\n    \n\n**Note**: CSSCat does not copy the files into a new directory before processing. This [gist][copy-files] shows how to use use CSSCat's fs-helper in a build.js file to easily generate a copy of the original directory.\n\n## Options ##\n\n- `debug` {Boolean} Enable verbose logging. Defaults to `false`.\n\n- `dir` {String} The path (relative to the file from which `csscat.init` is invoked) used to search for all files with a \"css\" extension.\n\n- `exclude` {RegEx} Regex exclusion pattern used to filter the results. Defaults to `/^.|/./`, which filters out all directories/files that start with a `.`.\n\n- `optimize` Minify via CSSMin.\n\n\n## Roadmap ##\n\n- Unit tests\n- Compatibility with other tools ([RequireJS][requirejs], [Grunt][grunt])\n- Image `data-uri` inlining\n- [Source map][source-maps-html5rocks] generation ([more explanation][source-maps-snugug]). Mozilla [has a nodejs package][moz-source-map].\n\n\n[nodejs]: http://nodejs.org/\n[mqs]: http://www.w3.org/TR/css3-mediaqueries/#media0\n[copy-files]: https://gist.github.com/ryanfitzer/5202101\n[CSSMin]: https://github.com/yui/ycssmin\n[requirejs]: http://requirejs.org/\n[grunt]: http://gruntjs.com/\n[data-uri]:https://developer.mozilla.org/en-US/docs/data_URIs\n[source-maps-html5rocks]:http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\n[moz-source-map]: https://github.com/mozilla/source-map\n[source-maps-snugug]:http://snugug.com/musings/debugging-sass-source-maps\n"
}
